// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Location {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]

  @@map("locations")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]

  @@map("categories")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  email        String        @unique
  password     String
  referralCode String?       @unique
  isAdmin      Boolean
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  points       Point[]
  events       Event[]
  feedbacks    Feedback[]
  vouchers     Voucher[]
  transactions Transaction[]

  @@map("users")
}

model Point {
  id         Int      @id @default(autoincrement())
  saldo      Int
  expiryDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  user       User     @relation(fields: [userId], references: [id])

  @@map("points")
}

model Event {
  id             Int           @id @default(autoincrement())
  name           String
  price          Int
  description    String?       @db.Text
  availableSeats Int
  limitCheckout  Int?
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         Int
  locationId     Int
  categoryId     Int
  feedbacks      Feedback[]
  vouchers       Voucher[]
  transactions   Transaction[]
  location       Location      @relation(fields: [locationId], references: [id])
  category       Category      @relation(fields: [categoryId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@map("events")
}

model Feedback {
  id        Int      @id @default(autoincrement())
  message   String?  @db.Text
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model Voucher {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  discount     Int
  expiryDate   DateTime
  maxUsage     Int
  usage        Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  eventId      Int?
  userId       Int?
  transactions Transaction[]
  user         User?         @relation(fields: [userId], references: [id])
  event        Event?        @relation(fields: [eventId], references: [id])
}

model Transaction {
  id            Int           @id @default(autoincrement())
  price         Int
  redeemPoints  Int?
  userId        Int
  eventId       Int
  voucherId     Int?
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  event         Event         @relation(fields: [eventId], references: [id])
  voucher       Voucher?      @relation(fields: [voucherId], references: [id])
}

enum PaymentStatus {
  waiting
  paid
  success
  failed
}
